{"name": "test_CredeKart_Login_params_003[getDataforLogin2]", "status": "failed", "statusDetails": {"message": "AssertionError: assert False", "trace": "self = <testCases.test_Login_params.Test_Credekart_Login_params object at 0x000001D23B271340>\nsetup = <selenium.webdriver.edge.webdriver.WebDriver (session=\"f60d03763ae1010d3107d6d3fcac3ef8\")>\ngetDataforLogin = ('Credencetest@test.com', 'Credence@12331')\n\n    def test_CredeKart_Login_params_003(self,setup,getDataforLogin):\n        self.driver = setup\n    \n        self.driver.maximize_window()\n    \n        self.driver.get(\"https://automation.credence.in/login\")\n    \n        self.driver.find_element(By.XPATH, \"//input[@id='email']\").send_keys(getDataforLogin[0])\n    \n        self.driver.find_element(By.XPATH, \"//input[@id='password']\").send_keys(getDataforLogin[1])\n    \n        self.driver.find_element(By.XPATH, \"//button[@type='submit']\").click()\n    \n        try:\n>           self.driver.find_element(By.XPATH, \"//h2[normalize-space()='CredKart']\")\n\ntestCases\\test_Login_params.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D23B195580>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...D8BD70+188192]\\\\n\\\\tBaseThreadInitThunk [0x00007FFD1A8B257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFD1B8AAA48+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//h2[normalize-space()='CredKart']\"}\nE         (Session info: MicrosoftEdge=125.0.2535.85); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF734E05DD2+61250]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF734D906D9+206985]\nE       \t(No symbol) [0x00007FF734B9E3C7]\nE       \t(No symbol) [0x00007FF734BE52A3]\nE       \t(No symbol) [0x00007FF734BE5366]\nE       \t(No symbol) [0x00007FF734C202C7]\nE       \t(No symbol) [0x00007FF734C0493F]\nE       \t(No symbol) [0x00007FF734BDAAA7]\nE       \t(No symbol) [0x00007FF734C1DEB7]\nE       \t(No symbol) [0x00007FF734C04563]\nE       \t(No symbol) [0x00007FF734BD9FCE]\nE       \t(No symbol) [0x00007FF734BD918C]\nE       \t(No symbol) [0x00007FF734BD9B81]\nE       \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF734FBDF64+1072532]\nE       \t(No symbol) [0x00007FF734C52D9C]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF734CFEF4C+51468]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF734CF3805+4549]\nE       \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF734FBCF25+1068373]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF734D9A0E1+246417]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF734D95444+226804]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF734D9557B+227115]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF734D8BD70+188192]\nE       \tBaseThreadInitThunk [0x00007FFD1A8B257D+29]\nE       \tRtlUserThreadStart [0x00007FFD1B8AAA48+40]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCases.test_Login_params.Test_Credekart_Login_params object at 0x000001D23B271340>\nsetup = <selenium.webdriver.edge.webdriver.WebDriver (session=\"f60d03763ae1010d3107d6d3fcac3ef8\")>\ngetDataforLogin = ('Credencetest@test.com', 'Credence@12331')\n\n    def test_CredeKart_Login_params_003(self,setup,getDataforLogin):\n        self.driver = setup\n    \n        self.driver.maximize_window()\n    \n        self.driver.get(\"https://automation.credence.in/login\")\n    \n        self.driver.find_element(By.XPATH, \"//input[@id='email']\").send_keys(getDataforLogin[0])\n    \n        self.driver.find_element(By.XPATH, \"//input[@id='password']\").send_keys(getDataforLogin[1])\n    \n        self.driver.find_element(By.XPATH, \"//button[@type='submit']\").click()\n    \n        try:\n            self.driver.find_element(By.XPATH, \"//h2[normalize-space()='CredKart']\")\n            self.driver.save_screenshot(\".\\\\Screenshots\\\\test_Userlogin.PNG\")\n    \n            print(\"Login Pass\")\n            assert True\n    \n        except:\n            print(\"Login fail\")\n>           assert False\nE           assert False\n\ntestCases\\test_Login_params.py:29: AssertionError"}, "parameters": [{"name": "getDataforLogin", "value": "('Credencetest@test.com', 'Credence@12331')"}], "start": 1719165203067, "stop": 1719165208509, "uuid": "c3243fe8-f9d8-4234-88b1-8c77957fbef4", "historyId": "09dd4e2169333619510fd8476030e8ca", "testCaseId": "3309f656734816cf2767a7751f975f64", "fullName": "testCases.test_Login_params.Test_Credekart_Login_params#test_CredeKart_Login_params_003", "labels": [{"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_Login_params"}, {"name": "subSuite", "value": "Test_Credekart_Login_params"}, {"name": "host", "value": "Nikhil"}, {"name": "thread", "value": "7180-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_Login_params"}]}